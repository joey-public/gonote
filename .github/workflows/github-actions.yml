## This is a basic workflow to help you get started with Actions
#
#name: CI
#
## Controls when the workflow will run
#on:
#  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.
name: "godot-ci export"
on: 
    push:
        branches: [ github_pages ]

env:
  GODOT_VERSION: 3.3.4
  EXPORT_NAME: test-project

jobs:
#  export-windows:
#    name: Windows Export
#    runs-on: ubuntu-latest
#    container:
#      image: barichello/godot-ci:3.3.4
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: true
#      - name: Setup
#        run: |
#          mkdir -v -p ~/.local/share/godot/templates
#          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#      - name: Windows Build
#        run: |
#          mkdir -v -p build/windows
#          cd $EXPORT_NAME
#          godot -v --export "Windows Desktop" ../build/windows/$EXPORT_NAME.exe
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: windows
#          path: build/windows

#  export-linux:
#    name: Linux Export
#    runs-on: ubuntu-latest
#    container:
#      image: barichello/godot-ci:3.3.4
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: true
#      - name: Setup
#        run: |
#          mkdir -v -p ~/.local/share/godot/templates
#          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#      - name: Linux Build
#        run: |
#          mkdir -v -p build/linux
#          cd $EXPORT_NAME
#          godot -v --export "Linux/X11" ../build/linux/$EXPORT_NAME.x86_64
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: linux
#          path: build/linux

  export-web:
    name: Web Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3.4
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Web Build
        run: |
          mkdir -v -p build/web
          cd $EXPORT_NAME
          godot -v --export "HTML5" ../build/web/index.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: web
          path: build/web
      # Installing rsync is needed in order to deploy to GitHub Pages. Without it, the build will fail.
      - name: Install rsync ðŸ“š
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: build/web # The folder the action should deploy.
#
#  export-mac:
#    name: Mac Export
#    runs-on: ubuntu-latest
#    container:
#      image: barichello/godot-ci:3.3.4
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#        with:
#          lfs: true
#      - name: Setup
#        run: |
#          mkdir -v -p ~/.local/share/godot/templates
#          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
#      - name: Mac Build
#        run: |
#          mkdir -v -p build/mac
#          cd $EXPORT_NAME
#          godot -v --export "Mac OSX" ../build/mac/$EXPORT_NAME.zip
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: mac
#          path: build/mac
#name: GitlabSync
#
#on:
#  - push
#  - delete
#
#jobs:
#  sync:
#    runs-on: ubuntu-latest
#    name: Git Repo Sync
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        fetch-depth: 0
#    - uses: wangchucheng/git-repo-sync@v0.1.0
#      with:
#        # Such as https://github.com/wangchucheng/git-repo-sync.git
#        target-url: ${{ secrets.TARGET_URL }}
#        # Such as wangchucheng
#        target-username: ${{ secrets.TARGET_USERNAME }}
#          # You can store token in your project's 'Setting > Secrets' and reference the name here. Such as ${{ secrets.ACCESS\_TOKEN }}
#        target-token: ${{ secrets.TARGET_TOKEN }}